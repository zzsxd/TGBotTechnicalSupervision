# main.py
import time
import telebot
import os
import re
import json
import threading
import platform
from telebot import types
from threading import Lock
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from backend import DbAct
from db import DB

config_name = 'secrets.json'

AUDIT_CHECKLIST = [
    {
        "section": "1. –û–∫–ª–µ–π–∫–∞ –≤—Ö–æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏",
        "questions": [
            {"id": "q1_1", "text": "–ö–æ–Ω—Ç—É—Ä –¥–≤–µ—Ä–∏ –∑–∞–∫–ª–µ–µ–Ω –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º —Å–∫–æ—Ç—á–µ–º?"},
            {"id": "q1_2", "text": "–ü–æ–ª–æ—Ç–Ω–æ –æ–∫–ª–µ–µ–Ω–æ —É–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º?"},
            {"id": "q1_3", "text": "–°–Ω–∞—Ä—É–∂–∏ –Ω–∞–∫–ª–µ–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏?"},
            {"id": "q1_4", "text": "–í–Ω—É—Ç—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–∞–Ω–∏–∏?"},
            {"id": "q1_5", "text": "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ–π—Ñ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π?"},
            {"id": "q1_6", "text": "–í–ª–∞–∂–Ω–∞—è —Ç—Ä—è–ø–∫–∞ –Ω–∞ –≤—Ö–æ–¥–µ?"},
            {"id": "q1_7", "text": "–í—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏—Ç–∞–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω?"},
            {"id": "q1_8", "text": "–í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–æ–¥–µ?"},
        ]
    },
    {
        "section": "2. –û–∫–Ω–∞ –∏ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
        "questions": [
            {"id": "q2_1", "text": "–û–∫–Ω–∞ –∑–∞–∫–ª–µ–µ–Ω—ã –ø–ª—ë–Ω–∫–æ–π?"},
            {"id": "q2_2", "text": "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —É–¥–∞—Ä–æ—Å—Ç–æ–π–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º?"},
            {"id": "q2_3", "text": "–†–∞–¥–∏–∞—Ç–æ—Ä—ã —É–∫—Ä—ã—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ?"},
        ]
    },
    {
        "section": "3. –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞",
        "questions": [
            {"id": "q3_1", "text": "–ï—Å—Ç—å —Ä–∞–∑–¥–µ–≤–∞–ª–∫–∞?"},
            {"id": "q3_2", "text": "–ê–ø—Ç–µ—á–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç?"},
            {"id": "q3_3", "text": "–ï—Å—Ç—å –±–æ–∫—Å/–∫–µ–π—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤?"},
            {"id": "q3_4", "text": "–í –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ‚Äî —Ä–∞–∑–º–µ—â—ë–Ω –ª–∏—Å—Ç —Å –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ —Å—Ç–µ–Ω–µ?"},
        ]
    },
    {
        "section": "4. –ß–∏—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "questions": [
            {"id": "q4_1", "text": "–ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–ª–æ–∂–µ–Ω—ã?"},
            {"id": "q4_2", "text": "–£–∫—Ä—ã—Ç—ã –∑–∞—â–∏—Ç–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º (—Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)?"},
        ]
    },
    {
        "section": "5. –ß–µ—Ä–Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "questions": [
            {"id": "q5_1", "text": "–°–ª–æ–∂–µ–Ω—ã –≤ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–º –º–µ—Å—Ç–µ?"},
            {"id": "q5_2", "text": "–ù–∞—Ö–æ–¥—è—Ç—Å—è –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ, –±–µ–∑ –ø—ã–ª–∏ –∏ –≥—Ä—è–∑–∏?"},
        ]
    },
    {
        "section": "6. –ë—ã—Ç–æ–≤–æ–π –º—É—Å–æ—Ä",
        "questions": [
            {"id": "q6_1", "text": "–ù–∞ –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞?"},
        ]
    },
    {
        "section": "7. –ü–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç",
        "questions": [
            {"id": "q7_1", "text": "–ù–∞–≤–µ–¥—ë–Ω –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç?"},
            {"id": "q7_2", "text": "–ù–∞ –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–ø–∞—Ö–∞ —Å–∏–≥–∞—Ä–µ—Ç?"},
        ]
    }
]

def calculate_score(answers):
    total_questions = sum(len(section["questions"]) for section in AUDIT_CHECKLIST)
    positive_answers = sum(1 for answer in answers.values() if answer)
    return positive_answers, total_questions

def get_result_message(score, total):
    if score >= 20:
        return "–û—Ç–ª–∏—á–Ω–æ"
    elif score >= 16:
        return "–•–æ—Ä–æ—à–æ"
    elif score >= 14:
        return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        return "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"

def main():
    @bot.message_handler(commands=['start'])
    def start(message):
        user_id = message.from_user.id
        buttons = Bot_inline_btns()
        db_actions.add_user(user_id, message.from_user.first_name, 
                        message.from_user.last_name, 
                        f'@{message.from_user.username}')
        db_actions.clear_audit_data(user_id)
        db_actions.set_user_system_key(user_id, "user_object", None)
        
        bot.send_message(
            user_id, 
            '–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–≤–µ–¥—ë–º –∞—É–¥–∏—Ç –æ–±—ä–µ–∫—Ç–∞ –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É —á–∏—Å—Ç–æ—Ç—ã. –û—Ç–≤–µ—á–∞–π ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª ‚Äî –Ω–∞—á–Ω—ë–º?\n'
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ üòä',
            parse_mode='HTML'
        )

    @bot.message_handler(content_types=['text'])
    def text_message(message):
        user_id = message.chat.id
        user_input = message.text.strip()
        if not db_actions.user_is_existed(user_id):
            return
        
        current_section = db_actions.get_user_system_key(user_id, "current_section")
        current_question = db_actions.get_user_system_key(user_id, "current_question")
        
        if current_section == 0 and current_question == 0 and db_actions.get_user_system_key(user_id, "user_object") is None:
            if not user_input:
                bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.")
                return
                
            db_actions.set_user_system_key(user_id, "user_object", user_input)
            ask_question(user_id, 0, 0)

    def ask_question(user_id, section_idx, question_idx):
        section = AUDIT_CHECKLIST[section_idx]
        question = section["questions"][question_idx]
        
        buttons = Bot_inline_btns()
        bot.send_message(
            user_id,
            f"{section['section']}\n\n‚Ä¢{question['text']}",
            reply_markup=buttons.yes_no_buttons()
        )

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        user_id = call.message.chat.id
        buttons = Bot_inline_btns()
        
        if call.data in ["answer_yes", "answer_no"]:
            current_section = db_actions.get_user_system_key(user_id, "current_section")
            current_question = db_actions.get_user_system_key(user_id, "current_question")
            
            if current_section is None or current_question is None:
                bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∞—É–¥–∏—Ç —Å –∫–æ–º–∞–Ω–¥—ã /start")
                return
                
            try:
                section = AUDIT_CHECKLIST[current_section]
                question = section["questions"][current_question]
                
                answer = call.data == "answer_yes"
                db_actions.add_audit_answer(user_id, question["id"], answer)
            
            
            
                next_question = current_question + 1
                next_section = current_section
                
                if next_question >= len(section["questions"]):
                    next_question = 0
                    next_section += 1
                    
                    if next_section >= len(AUDIT_CHECKLIST):
                        answers = db_actions.get_audit_results(user_id)
                        score, total = calculate_score(answers)
                        result = get_result_message(score, total)
                        
                        object_number = db_actions.get_user_system_key(user_id, "user_object")
                        report_message = (
                            f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ {object_number}:\n\n"
                            f"‚Ä¢ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {score} –∏–∑ {total}\n"
                            f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {result}\n\n"
                        )
                        
                        if score == total:
                            report_message += "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–±—ä–µ–∫—Ç –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!"
                        elif score >= 16:
                            report_message += "üëâ –†–µ–∫–æ–º–µ–Ω–¥—É—é —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –º–µ–ª–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
                        elif score >= 14:
                            report_message += "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∞—Å–ø–µ–∫—Ç–∞–º –æ–±—ä–µ–∫—Ç–∞."
                        else:
                            report_message += "üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤!"
                        
                        bot.send_message(
                            user_id,
                            report_message,
                            reply_markup=buttons.restart_button()
                        )
                        return
                db_actions.set_user_system_key(user_id, "current_section", next_section)
                db_actions.set_user_system_key(user_id, "current_question", next_question)
                ask_question(user_id, next_section, next_question)
            except Exception as e:
                bot.send_message(user_id, "–û—à–∏–±–∫–∞")
            
        elif call.data == "restart_audit":
            db_actions.clear_audit_data(user_id)
            db_actions.set_user_system_key(user_id, "current_question", 0)
            db_actions.set_user_system_key(user_id, "current_section", 0)
            bot.send_message(
                user_id,
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞ üòä',
                parse_mode='HTML'
            )

    bot.polling(none_stop=True)

if '__main__' == __name__:
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    db = DB(config.get_config()['db_file_name'], Lock())
    db_actions = DbAct(db, config)
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()